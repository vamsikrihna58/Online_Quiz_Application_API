package com.Online_Quiz_Application_API.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.Online_Quiz_Application_API.Entity.OptionsEntity;
import com.Online_Quiz_Application_API.Entity.Questions;
import com.Online_Quiz_Application_API.Entity.Quiz_Management;
import com.Online_Quiz_Application_API.ExeptionHandling.Quiz_Not_Found;
import com.Online_Quiz_Application_API.Repository.Quiz_info;
import com.Online_Quiz_Application_API.Repository.Qustion_repository;
import com.Online_Quiz_Application_API.Utility.SubmitionItems;
import com.Online_Quiz_Application_API.Utility.SumbitionResponse;
import com.Online_Quiz_Application_API.Utility.getAllQuesionsByEntity;
import com.Online_Quiz_Application_API.Utility.getAllQuesionsModel;

@Service
public class Online_Quiz_Service {

	private Quiz_info quiz_info;
	private Qustion_repository qustion_repository;

	public Online_Quiz_Service(Quiz_info quiz_info, Qustion_repository qustion_repository) {
		this.quiz_info = quiz_info;
		this.qustion_repository = qustion_repository;
	}

	public Quiz_Management save_Quiz_Info(Quiz_Management quiz_management) {

		return quiz_info.save(quiz_management);

	}

	public Questions add_Questions(int quiz_id, Questions questions) {
		Quiz_Management	byId =quiz_info.findById(quiz_id)
			    .orElseThrow(() -> new Quiz_Not_Found(quiz_id));

		questions.setQuiz_management(byId);

		return qustion_repository.save(questions);

	}

	public List<getAllQuesionsByEntity> get_All_Questions(int quiz_id) {
		Quiz_Management	byId =quiz_info.findById(quiz_id)
			    .orElseThrow(() -> new Quiz_Not_Found(quiz_id));


		List<Questions> questions = byId.getQuestions();

		return questions.stream().map(o -> {
			List<OptionsEntity> optionsEntities = o.getOptionsEntities();
			List<getAllQuesionsModel> collect = optionsEntities.stream().map(q -> {
				return new getAllQuesionsModel(q.getOption(), q.getAnswer());
			}).collect(Collectors.toList());
			return new getAllQuesionsByEntity(o.getId(), o.getName(), collect);

		}).collect(Collectors.toList());

	}

	public SumbitionResponse submit(int quiz_id, List<SubmitionItems> items) {
		Quiz_Management	byId =quiz_info.findById(quiz_id)
			    .orElseThrow(() -> new Quiz_Not_Found(quiz_id));


		List<Questions> questions = byId.getQuestions();

		SumbitionResponse sr = new SumbitionResponse();

		int score = 0;

		for (SubmitionItems si : items) {
			// Find the question by submitted ID
			for (Questions q : questions) {
				if (q.getId() == si.getId()) {
					// Find the selected option in this question
					for (OptionsEntity opt : q.getOptionsEntities()) {
						if (opt.getOption() == si.getOption_id() && opt.isCorrect_Or_Not()) {
							score++;
						}
					}
				}
			}
		}
		sr.setScore(score);
		sr.setTotal(questions.size());
		return sr;
	}

}
